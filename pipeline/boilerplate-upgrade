#!/usr/bin/env bash

source "/Users/dongpham/Desktop/boilerplates/lib/bash/core.sh"

function textFound() {

  local TEXT="${1:-}"

  local FIND_RESULTS
  FIND_RESULTS="$(
    find . -name "*${TEXT}*" |
      (grep --invert-match '^\./\.git/\|^\./pipeline/boilerplate-' || true)
  )"

  if [[ -n "${FIND_RESULTS}" ]]; then
    echo "\"${TEXT}\" found in file/folder names."
    return 0
  fi

  if (
    grep -E --recursive "${TEXT}" . |
      grep '^\./' |
      grep --invert-match '^\./\.git/\|^\./pipeline/boilerplate-'
  ); then
    echo "\"${TEXT}\" found in file contents."
    return 0
  fi

  return 1
}

function replace() {

  local OLD_TEXT="${1:-}"
  local NEW_TEXT="${2:-}"

  if [[ -z "${NEW_TEXT:-}" ]]; then
    return 0
  fi

  while true; do

    local OLD_ITEM
    OLD_ITEM="$(
      find . -name "*${OLD_TEXT}*" |
        head -n 1
    )"
    if [[ -z "${OLD_ITEM}" ]]; then
      break
    fi

    local NEW_ITEM
    NEW_ITEM="$(echo "${OLD_ITEM}" | sed -E "s|${OLD_TEXT}|${NEW_TEXT}|g")"

    (
      set -x
      mv -n "${OLD_ITEM}" "${NEW_ITEM}"
    )

  done

  (grep -E --recursive "${OLD_TEXT}" . || true) |
    (grep '^\./' || true) |
    (grep --invert-match '^\./\.git/\|^\./pipeline/boilerplate-' || true) |
    awk '{print $1}' |
    sed 's|:.*$||' |
    uniq |
    while IFS='' read -r FILE; do
      sed -i.bak "s|${OLD_TEXT}|${NEW_TEXT}|g" "${FILE}"
      rm "${FILE}.bak"
    done
}

function main() {

  echo -e "${OK_COLOR}==> Upgrading boilerplate..."

  local REMOTE_URL="https://bitbucket.org/nabstudio/boilerplates.git"

  if [[ -d "./.git" ]]; then
    # Current folder is Git root

    # "z" to keep remote at the bottom
    # to prevent auto-push
    local REMOTE_NAME="zboilerplate"

    if ! git remote -v | grep "${REMOTE_NAME}" >/dev/null; then
      (
        set -x
        git remote add \
          "${REMOTE_NAME}" \
          "${REMOTE_URL}"
      )
    fi

    (
      set -x
      git fetch \
        --tags \
        --prune \
        "${REMOTE_NAME}"
    )

    local CONFIG_FILE="./.boilerplate/config.json"
    if [[ ! -f "${CONFIG_FILE}" ]]; then
      (
        set -x
        git merge \
          --allow-unrelated-histories \
          "${REMOTE_NAME}/master"
      )
    fi

    (
      jq \
        --raw-output \
        ".dependencies[]" \
        "${CONFIG_FILE}" ||
        true
    ) |
      while IFS="" read -r BRANCH; do
        (
          set -x
          git merge \
            --allow-unrelated-histories \
            "${REMOTE_NAME}/${BRANCH}"
        )
      done

    (
      set -x

      git submodule update \
        --init \
        --recursive

      git remote remove \
        "${REMOTE_NAME}"
    )

    local GIT_REMOTE_URL
    GIT_REMOTE_URL="$(git config --get remote.origin.url)"
    if [[ "${GIT_REMOTE_URL}" != *"bitbucket.org/nabstudio/boilerplates.git" ]]; then

      if textFound "MyAwesomeProject"; then
        echo "Project name: (My Project) "
        (
          local PROJECT_NAME
          read -r PROJECT_NAME
          if [[ -z "${PROJECT_NAME}" ]]; then
            PROJECT_NAME="My Project"
          fi
          replace "MyAwesomeProject" "${PROJECT_NAME}"
        )
      fi

      if textFound "myawesomeproject"; then
        echo "Project key: (my-project) "
        (
          local PROJECT_KEY
          read -r PROJECT_KEY
          if [[ -z "${PROJECT_KEY}" ]]; then
            PROJECT_KEY="my-project"
          fi
          replace "myawesomeproject" "${PROJECT_KEY}"
        )
      fi

    fi

  else

    echo "Current folder is not a Git repo." >&2
    return 1

  fi

}

main "$@"
